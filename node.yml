AWSTemplateFormatVersion: '2010-09-09'

Description: Kubernetes node resources

Parameters:
  ClusterName:
    Description: Name of Kubernetes cluster
    Type: String
  NumInstances:
    Description: Number of node instances
    Type: Number
    Default: 1
  VpcId:
    Description: ID of VPC where cluster will be placed
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: List of subnets IDs in VPC where cluster will be placed
    Type: List<AWS::EC2::Subnet::Id>
  ImageId:
    Description: ID of AMI used for instances
    Type: AWS::EC2::Image::Id
  InstanceType:
    Description: Type of EC2 instance
    Type: String
  KeyPair:
    Description: SSH keypair assigned to instances
    Type: AWS::EC2::KeyPair::KeyName
  IamInstanceProfile:
    Description: IAM Instance profile to assign to instances
    Type: String
  MasterAutoscalingGroup:
    Description: Name of master autoscaling group
    Type: String
  ApiServerSecurityGroup:
    Description: Security group of apiserver
    Type: String
  KubeletSecurityGroup:
    Description: Security group for kubelet
    Type: String
  KubeRouterSecurityGroup:
    Description: Security group for kube-router
    Type: String
  PodCidr:
    Description: CIDR block of addresses for pods
    Default: 10.0.0.0/16
    Type: String
  SshAccessCidr:
    Description: CIDR block given ssh access to cluster
    Default: 0.0.0.0/0
    Type: String
  K8sVersion:
    Description: Version of Kubernetes
    Type: String
  KubeRouterVersion:
    Description: Version of kube-router
    Type: String

Resources:
  AutoscalingGroupSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for autoscaling group
      VpcId: !Ref VpcId

  AutoscalingGroupIngressSsh:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AutoscalingGroupSecurityGroup
      CidrIp: !Ref SshAccessCidr
      FromPort: 22
      IpProtocol: tcp
      ToPort: 22

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NumInstances
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !Ref NumInstances
      MinSize: !Ref NumInstances
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-node
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      PlacementTenancy: default
      SecurityGroups:
        - !Ref AutoscalingGroupSecurityGroup
        - !Ref ApiServerSecurityGroup
        - !Ref KubeletSecurityGroup
        - !Ref KubeRouterSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #cloud-config
            write_files:
              - path: /etc/systemd/system/keights-bootstrap-kubeconfig.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_CLUSTER_NAME=${ClusterName}
                  Environment=KEIGHTS_DOMAIN=k8s.local

              - path: /etc/systemd/system/keights-collector.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_VOLUME_TAG=etcd:instance
                  Environment=KEIGHTS_ASG_NAME=${MasterAutoscalingGroup}
                  ExecStart=
                  ExecStart=/usr/bin/keights collect \
                              -v ${!KEIGHTS_VOLUME_TAG} \
                              -a ${!KEIGHTS_ASG_NAME} \
                              -o /run/keights-collector/asg

              - path: /etc/systemd/system/keights-share.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_DOMAIN=k8s.local
                  Environment=KEIGHTS_PREFIX=${ClusterName}

              - path: /etc/systemd/system/keights-whisper-node.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_CLUSTER_NAME=${ClusterName}

              - path: /etc/systemd/system/kubelet.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_DOMAIN=k8s.local
                  Environment=KEIGHTS_POD_CIDR=${PodCidr}
                  Environment=KEIGHTS_NODE_LABELS=kubernetes.io/role=node,node-role.kubernetes.io/node=
                  Environment=KEIGHTS_NODE_REGISTER=--register-node=true

              - path: /etc/systemd/system/kube-router.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_KUBE_ROUTER_IMAGE=cloudnativelabs/kube-router:v${KubeRouterVersion}

              - path: /etc/systemd/system/kube-router-kubeconfig.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_CLUSTER_NAME=${ClusterName}
                  Environment=KEIGHTS_DOMAIN=k8s.local

            runcmd:
              - systemctl daemon-reload
              - systemctl enable keights-collector.timer
              - systemctl enable keights-collector.service
              - systemctl enable keights-share.path
              - systemctl enable keights-whisper-node.service
              - systemctl enable keights-bootstrap-kubeconfig.service
              - systemctl enable kubelet.service
              - systemctl enable kube-router.service
              - systemctl enable kube-router-kubeconfig.service
              - systemctl start --no-block kubelet.service
              - systemctl start --no-block kube-router.service

Outputs:
  AutoscalingGroupSecurityGroup:
    Description: Security group of autoscaling group
    Value: !Ref AutoscalingGroupSecurityGroup
  AutoScalingGroup:
    Description: Name of autoscaling group
    Value: !Ref AutoScalingGroup
