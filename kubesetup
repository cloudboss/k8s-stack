#!/bin/sh

cluster=${1}

if [ -z "${cluster}" ]; then
    echo "Usage: ${0} <cluster-name>"
    exit 1
fi

function lb_dns()
{
    local cluster=${1}

    lbs=`aws elbv2 describe-load-balancers \
            --query 'LoadBalancers[*].[DNSName,LoadBalancerArn]' \
            --output text | tr [:space:] ,`
    for lb in ${lbs}; do
        dns_name=`echo ${lb} | cut -d , -f 1`
        lb_arn=`echo ${lb} | cut -d , -f 2`
        cluster_tag_value=`aws elbv2 describe-tags \
                               --resource-arns ${lb_arn} \
                               --query 'TagDescriptions[*].Tags[?Key==\`KubernetesCluster\`].Value' \
                               --output text`
        if [ "${cluster_tag_value}" = "${cluster}" ]; then
            echo ${dns_name}
            break
        fi
    done
}

ca_cert=`mktemp`
cert=`mktemp`
key=`mktemp`

trap "rm -f ${ca_cert} ${cert} ${key}" 0

server=`lb_dns ${cluster}`

aws ssm get-parameters \
    --names /${cluster}/cluster/ca.crt \
    --with-decryption \
    --query 'Parameters[*].Value' \
    --output text > ${ca_cert}

aws ssm get-parameters \
    --names /${cluster}/controller/apiserver-kubelet-client.crt \
    --with-decryption \
    --query 'Parameters[*].Value' \
    --output text > ${cert}

aws ssm get-parameters \
    --names /${cluster}/controller/apiserver-kubelet-client.key \
    --with-decryption \
    --query 'Parameters[*].Value' \
    --output text > ${key}

kubectl config set-cluster ${cluster} \
    --certificate-authority=${ca_cert} \
    --server=https://${server} \
    --embed-certs=true

kubectl config set-context admin@${cluster} \
    --cluster=${cluster} --user=admin

kubectl config use-context admin@${cluster}

kubectl config set-credentials admin \
    --client-certificate=${cert} \
    --client-key=${key} \
    --embed-certs=true
