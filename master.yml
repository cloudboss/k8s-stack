AWSTemplateFormatVersion: '2010-09-09'

Description: Kubernetes master resources

Parameters:
  ClusterName:
    Description: Name of Kubernetes cluster
    Type: String
  NumInstances:
    Description: Number of master instances
    Type: Number
    Default: 1
    AllowedValues: [1, 3]
    ConstraintDescription: You must choose an odd number of instances
  VpcId:
    Description: ID of VPC where cluster will be placed
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: List of subnets IDs in VPC where cluster will be placed
    Type: List<AWS::EC2::Subnet::Id>
  ImageId:
    Description: ID of AMI used for instances
    Type: AWS::EC2::Image::Id
  InstanceType:
    Description: Type of EC2 instance
    Type: String
  KeyPair:
    Description: SSH keypair assigned to instances
    Type: AWS::EC2::KeyPair::KeyName
  IamInstanceProfile:
    Description: IAM Instance profile to assign to instances
    Type: String
  ApiServerSecurityGroup:
    Description: Security group for apiserver
    Type: String
  KubeletSecurityGroup:
    Description: Security group for kubelet
    Type: String
  KubeRouterSecurityGroup:
    Description: Security group for kube-router
    Type: String
  LambdaExecutionRole:
    Description: Role to assign to helper Lamba functions
    Type: String
  PodCidr:
    Description: CIDR block of addresses for pods
    Default: 10.0.0.0/16
    Type: String
  ServiceCidr:
    Description: CIDR block of addresses for services
    Default: 10.1.0.0/16
    Type: String
  SshAccessCidr:
    Description: CIDR block given ssh access to cluster
    Default: 0.0.0.0/0
    Type: String
  K8sVersion:
    Description: Version of Kubernetes
    Type: String
  EtcdVersion:
    Description: Version of etcd
    Type: String
  KubeRouterVersion:
    Description: Version of kube-router
    Type: String

Mappings:
  LambdaUrls:
    AllFunctions:
      Bucket: cloudboss-public
    SubnetToAzFunction:
      Key: lambda/co/cloudboss/stackboss/0.1.0/python3.6/stackboss-0.1.0.zip
  MaxSizes:
    NumInstances:
      '1': 2
      '3': 4

Conditions:
  HasThreeMasters: !Equals [!Ref NumInstances, 3]

Resources:
  SubnetToAzFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [LambdaUrls, AllFunctions, Bucket]
        S3Key: !FindInMap [LambdaUrls, SubnetToAzFunction, Key]
      Handler: stackboss.handlers.subnet_to_az
      Runtime: python3.6
      Timeout: 30
      Role: !Ref LambdaExecutionRole

  SubnetToAz1:
    Type: Custom::SubnetToAz
    DependsOn: SubnetToAzFunction
    Properties:
      ServiceToken: !GetAtt [SubnetToAzFunction, Arn]
      Region: !Ref AWS::Region
      SubnetId: !Select [0, !Ref SubnetIds]

  SubnetToAz2:
    Type: Custom::SubnetToAz
    DependsOn: SubnetToAzFunction
    Condition: HasThreeMasters
    Properties:
      ServiceToken: !GetAtt [SubnetToAzFunction, Arn]
      Region: !Ref AWS::Region
      SubnetId: !Select [1, !Ref SubnetIds]

  SubnetToAz3:
    Type: Custom::SubnetToAz
    DependsOn: SubnetToAzFunction
    Condition: HasThreeMasters
    Properties:
      ServiceToken: !GetAtt [SubnetToAzFunction, Arn]
      Region: !Ref AWS::Region
      SubnetId: !Select [2, !Ref SubnetIds]

  EtcdSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for etcd
      VpcId: !Ref VpcId

  EtcdSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EtcdSecurityGroup
      SourceSecurityGroupId: !Ref EtcdSecurityGroup
      FromPort: 2379
      ToPort: 2380
      IpProtocol: tcp

  EtcdSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EtcdSecurityGroup
      DestinationSecurityGroupId: !Ref EtcdSecurityGroup
      FromPort: 2379
      ToPort: 2380
      IpProtocol: tcp

  AutoscalingGroupSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for autoscaling group
      VpcId: !Ref VpcId

  AutoscalingGroupIngressSsh:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AutoscalingGroupSecurityGroup
      CidrIp: !Ref SshAccessCidr
      FromPort: 22
      IpProtocol: tcp
      ToPort: 22

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NumInstances
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !FindInMap [MaxSizes, NumInstances, !Ref NumInstances]
      MinSize: !Ref NumInstances
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-master
          PropagateAtLaunch: true

  Volume1:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !GetAtt [SubnetToAz1, AvailabilityZone]
      Size: 1
      VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Ref AutoScalingGroup
        - Key: etcd:instance
          Value: 1

  Volume2:
    Type: AWS::EC2::Volume
    Condition: HasThreeMasters
    Properties:
      AvailabilityZone: !GetAtt [SubnetToAz2, AvailabilityZone]
      Size: 1
      VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Ref AutoScalingGroup
        - Key: etcd:instance
          Value: 2

  Volume3:
    Type: AWS::EC2::Volume
    Condition: HasThreeMasters
    Properties:
      AvailabilityZone: !GetAtt [SubnetToAz3, AvailabilityZone]
      Size: 1
      VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Ref AutoScalingGroup
        - Key: etcd:instance
          Value: 3

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      PlacementTenancy: default
      SecurityGroups:
        - !Ref ApiServerSecurityGroup
        - !Ref KubeletSecurityGroup
        - !Ref KubeRouterSecurityGroup
        - !Ref AutoscalingGroupSecurityGroup
        - !Ref EtcdSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #cloud-config
            write_files:
              - path: /var/lib/kubelet/kubeconfig
                owner: root:root
                permissions: '0600'
                content: |
                  apiVersion: v1
                  kind: Config
                  clusters:
                  - cluster:
                      server: http://api-${ClusterName}.k8s.local:8080
                    name: local
                  contexts:
                  - context:
                      cluster: local
                      user: kubelet
                    name: service-account-context
                  current-context: service-account-context
                  preferences: {}

              - path: /var/lib/kube-router/kubeconfig
                owner: root:root
                permissions: '0600'
                content: |
                  apiVersion: v1
                  kind: Config
                  clusters:
                  - cluster:
                      server: http://api-${ClusterName}.k8s.local:8080
                    name: local
                  contexts:
                  - context:
                      cluster: local
                      user: kube-router
                    name: service-account-context
                  current-context: service-account-context
                  preferences: {}

              - path: /etc/systemd/system/keights-collector.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_VOLUME_TAG=etcd:instance

              - path: /etc/systemd/system/keights-share.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_DOMAIN=k8s.local
                  Environment=KEIGHTS_PREFIX=${ClusterName}

              - path: /etc/systemd/system/keights-templatize-etcd.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_DOMAIN=k8s.local
                  Environment=KEIGHTS_ETCD_CLUSTER_TOKEN=etcd-${ClusterName}
                  Environment=KEIGHTS_ETCD_IMAGE=gcr.io/google_containers/etcd:${EtcdVersion}
                  Environment=KEIGHTS_PREFIX=${ClusterName}

              - path: /etc/systemd/system/keights-templatize-kube-apiserver.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_DOMAIN=k8s.local
                  Environment=KEIGHTS_KUBE_APISERVER_IMAGE=gcr.io/google_containers/kube-apiserver:v${K8sVersion}
                  Environment=KEIGHTS_SERVICE_CIDR=${ServiceCidr}
                  Environment=KEIGHTS_PREFIX=${ClusterName}

              - path: /etc/systemd/system/keights-templatize-kube-controller-manager.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_POD_CIDR=${PodCidr}
                  Environment=KEIGHTS_SERVICE_CIDR=${ServiceCidr}
                  Environment=KEIGHTS_KUBE_CONTROLLER_MANAGER_IMAGE=gcr.io/google_containers/kube-controller-manager:v${K8sVersion}

              - path: /etc/systemd/system/keights-templatize-kube-scheduler.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_KUBE_SCHEDULER_IMAGE=gcr.io/google_containers/kube-scheduler:v${K8sVersion}
                  Environment=KEIGHTS_POD_CIDR=${PodCidr}

              - path: /etc/systemd/system/keights-volumize.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_VOLUME_TAG=etcd:instance

              - path: /etc/systemd/system/kubelet.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_DOMAIN=k8s.local
                  Environment=KEIGHTS_POD_CIDR=${PodCidr}
                  Environment=KEIGHTS_NODE_LABELS=kubernetes.io/role=master,node-role.kubernetes.io/master=
                  Environment=KEIGHTS_NODE_REGISTER=--register-with-taints=kubernetes.io/role=master:NoSchedule

              - path: /etc/systemd/system/kube-router.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_KUBE_ROUTER_IMAGE=cloudnativelabs/kube-router:v${KubeRouterVersion}

            runcmd:
              - systemctl enable keights-volumize.service
              - systemctl enable var-lib-etcd.mount
              - systemctl enable keights-collector.timer
              - systemctl enable keights-collector.service
              - systemctl enable keights-share.path
              - systemctl enable keights-templatize-etcd.path
              - systemctl enable keights-templatize-kube-apiserver.path
              - systemctl enable keights-templatize-kube-controller-manager.path
              - systemctl enable keights-templatize-kube-scheduler.path
              - systemctl enable kubelet.service
              - systemctl enable kube-router.service
              - systemctl start --no-block kubelet.service
              - systemctl start --no-block kube-router.service

Outputs:
  AutoscalingGroupSecurityGroup:
    Description: Security group of autoscaling group
    Value: !Ref AutoscalingGroupSecurityGroup
  EtcdSecurityGroup:
    Description: Security group for etcd
    Value: !Ref EtcdSecurityGroup
  AutoScalingGroup:
    Description: Name of autoscaling group
    Value: !Ref AutoScalingGroup
